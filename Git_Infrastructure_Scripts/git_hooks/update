#!/bin/sh
#
# An example hook script to blocks unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line


# This script depends on certain tools,library packages and hence does a quick availability check 
# with the function checkToolsInstalledorNot
#set -x
#!/bin/bash


refname="$1"
oldsha="$2"
newsha="$3"


######################################################
function memberTest(){

  if [[ $1 == "devops_team" ]]; then
     team="/mnt/hooks/devops.txt"
  elif [[ $1 == "devleads" ]]; then
     team="/mnt/hooks/devleads.txt"
  fi

  if [ -f $team ]; then
    PUSHING_ENTITY_NAME=$(id -un)
    
    for member in $(cat $team)
    do
      echo member is $member
      if [[ $PUSHING_ENTITY_NAME == "${member}" ]]
      then
        return 0
      fi
    done
 
    return 1

  else
     echo "$team does not exist"
     return 1
  fi
}
######################################################

lock_branch_file="/mnt/hooks/lock_branch.txt"

if [ -f $lock_branch_file ]; then

 for branch in $(cat $lock_branch_file)
  do
    #echo Branch is $branch
    if [[ $refname == "${branch}" ]]
    then
	#### Privileged users need to be able to push ####
	# Add the provision for it here #
	echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
	echo "You cannot push to $refname branch! It's locked"
	echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
	exit 1
    fi
 done

else
   echo "$lock_branch_file does not exist"
fi

if [ -z "$refname" -o -z "$oldsha" -o -z "$newsha" ]; then
	echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --bool hooks.allowunannotated)
allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
denycreatebranch=$(git config --bool hooks.denycreatebranch)
allowdeletetag=$(git config --bool hooks.allowdeletetag)
allowmodifytag=$(git config --bool hooks.allowmodifytag)

echo -e "allowunannotated = ${allowunannotated} \n \
         allowdeletebranch = ${allowdeletebranch} \n \
         denycreatebranch = ${denycreatebranch} \n \
         allowdeletetag = ${allowdeletetag} \n \
         allowmodifytag = ${allowmodifytag}"

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newsha" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newsha)
fi

echo newrev_type : ${newrev_type}
echo refname : ${refname}

#Pushing entity
PUSHING_ENTITY_NAME=$(id -un)


case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		echo Allowing unannotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		echo Deleting tag
		if [ "$allowdeletetag" != "true" ]; then
                    memberTest devops_team
                    res=$?
		   if [[ $res -eq "0" ]]; then
		      echo "*** WARNING: Letting ${PUSHING_ENTITY_NAME} delete an older tag in remote repo"
		    else
		       echo "*** Deleting a tag is not allowed in this repository" >&2
		       exit 1
		    fi
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		echo "Modifying annotated tag $refname"
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		echo "Branch operation: Either a commit in an existing branch or a new branch is being pushed !"
		if [ "$oldsha" = "$zero" -a "$denycreatebranch" = "true" ]; then
		# branch can be created by only authorised members
                    memberTest devops_team
                    res=$?
		   echo res is $res
                   sleep 3
                   if [[ $res -eq "0" ]]; then
		       echo "****** WARNING : It looks like the entity trying to create the branch is ${PUSHING_ENTITY_NAME}. ALLOWING it ******" >&2
		   else
		        echo "oldsha :  $oldsha"
		        echo "***** ERROR: Branch can be created by only authorised members *****"
			exit 1
		   fi
	       else
		   echo "Committing in existing branch"
		   #exit 1
               ########################################################################################################

                   underline=`tput smul`
                   nounderline=`tput rmul`
                   bold=$(tput bold)
                   normal=`tput sgr0`

                   NOREV=0000000000000000000000000000000000000000

                   BRANCH=$(git rev-parse --symbolic --abbrev-ref $refname)
                   REPOSITORY=$(pwd)

                   echo -e "\n\n---------------------------------------------------------------------------------------------"
                   echo -e "Updating branch ${underline}${bold}${BRANCH}${normal}${nounderline}. Existing commit: ${oldsha} "
                   echo -e "\t\t\t\tTOT commit  :${newsha}"
                   echo "-----------------------------------------------------------------------------------------------------------"

		   #### Testing #####
                   echo Branch: ${refname}
                   echo oldsha:  ${oldsha}
                   echo newsha:  ${newsha}

		   moveon=0

                   if [[ $newsha == $NOREV ]]; then
                      echo newsha = ${NOREV}
                      continue
                   fi
 
                   # make log argument be "..$newsha" when creating new branch
                   if [[ $oldsha == $NOREV ]]; then
                       revs=$newsha
                   else
                       revs=$oldsha..$newsha
                   fi

                   echo revs: $revs

                   OLD_SHA_ID=${oldsha}
                
		   SHA_IDs=$(git log --pretty=format:"%H" --reverse $revs)
                
		   #Also can use 
                   #SHA_IDs=$(git rev-list $revs)
                   #http://git-scm.com/book/en/v2/Customizing-Git-An-Example-Git-Enforced-Policy

                   printf "$SHA_IDs\n" | while read SHA_ID; do
            
                              echo -e "\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                              echo ${underline}${bold}Commit SHA:${normal}${nounderline}     ${SHA_ID}
            
                              COMMITTER_NAME=$(git show -s --format=%cn ${SHA_ID} )     
                              echo ${underline}${bold}Committer name:${normal}${nounderline} ${COMMITTER_NAME}

	                      if [ "${COMMITTER_NAME}" == "" ]; then
		              #temporary fix. letting author=committer
		                COMMITTER_NAME=$(git show -s --format=%an ${SHA_ID} )
	                      fi

	                      #PUSHING_ENTITY_NAME=$(id -un)
	                      echo ${underline}${bold}Pushing entity\'s name:${normal}${nounderline} ${PUSHING_ENTITY_NAME}
            
                              # Security check here
	                      # Entity that tries to push must match the committer's identity(username). If not,
	                      # it may be that the gitconfig is not rightly configured to reflect the correct username

                              if [ "${COMMITTER_NAME}" == "${PUSHING_ENTITY_NAME}" ];
	                      then
		                 echo Entity push check passed
	                      else
                                 memberTest devleads
                                 res=$?
		                 echo Res is $res
                                 if [[ $res -eq "0" ]]
		                 then
		                    echo *** WARNING: Looks like Dev lead,${PUSHING_ENTITY_NAME} is trying to cross merge branches ***
		                    sleep 3
				    #exit 10
		                    #exit 10
		                 else
		                    echo **** ERROR: Entity trying to push does not match the commiter\'s user ID. Something fishy! ****
		                    exit 9
		                    exit 9
		                 fi
	                      fi

	                      echo ${underline}${bold}Branch:${normal}${nounderline} ${BRANCH}

                              COMMIT_MESSAGE_SUBJECT=$(git show -s --format=%s ${SHA_ID} )
                              echo ${underline}${bold}Commit message:${normal}${nounderline} ${COMMIT_MESSAGE_SUBJECT}

	                      COMMIT_MESSAGE_BODY=$(git show -s --format=%b ${SHA_ID} )
                              echo ${underline}${bold}Message body:${normal}${nounderline} ${COMMIT_MESSAGE_BODY}

                              #In the first iteration, oldsha would be the one in the remote repository
                              #In subsequent iterations, old sha will be the previous SHA_ID, i.e., SHA_ID for the previous run      
                              #echo Running: git diff --name-status $OLD_SHA_ID..$SHA_ID
                              echo Running: git show --pretty="format:" --name-only $SHA_ID
	    
	                      #declare -a FILES
                              #FILES=$(git diff --name-status $OLD_SHA_ID..$SHA_ID )
                              FILES=$(git show --pretty="format:" --name-status $SHA_ID )
            
	                      echo ${underline}${bold}Files for checkin:${normal}${nounderline} ${FILES[@]} 

                              #echo $(pwd)
                              REPOSITORY=$(pwd)

                              #echo Feeding checkinguard.rb the following parameters ...
                              #echo ${SHA_ID} ${BRANCH} ${REPOSITORY} ${FILES} ${COMMITTER_NAME}  
                              #echo Running /usr/bin/ruby hooks/checkinguard.rb ${SHA_ID} ${BRANCH} ${REPOSITORY} "${FILES[@]}" ${COMMITTER_NAME} 
                              

			function checkinguard {
			      if ! /usr/bin/ruby hooks/checkinguard.rb ${SHA_ID} ${BRANCH} ${REPOSITORY} "${FILES[@]}" ${COMMITTER_NAME}
                              then
		                  echo hook detected an issue in checkinguard.rb
		                  exit 2
		                  exit 2
	                      else
		                  echo checkinguard.rb seems happy!
	                      fi

		        }

			checkinguard
           
	                      #-W0 turns off warning messages that go to stdout
	                      #if ! /usr/bin/ruby -W0 hooks/Checkinmgmt.thor jirachecks "${SHA_ID}" "${REPOSITORY}" "${FILES[@]}" "${COMMITTER_NAME}" "${BRANCH}" 
                              #then
	                      #	echo "hook detected an issue in jiracheck.rb"
	                      #	exit 3
	                      #	exit 3
                              #   fi

                              echo !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
                   done
                   #done

                   #Uncomment below if you want to test the hook
                   #exit 1
                   moveon=$?
                   #echo moveon value is ${moveon}

                   if [ "${moveon}" -eq "0"  ]; then
                      echo "****** SUCCESS : Push successful *****"
                      exit 0;
                   elif [ "${moveon}" -eq "2"  ]; then
                      exit 2;
                   elif [ "${moveon}" -eq "3"  ]; then
                      exit 3;
                   elif [ "${moveon}" -eq "9" ];then
                      echo "Security check failed!"
                      exit 9;
                   elif [ "${moveon}" -eq "10" ];then
                      echo "Cross merge across branches by dev lead!"
                      exit 10;
                   fi
                ######################################################################################################################
	        fi
		;;
	refs/heads/*,delete)
	        echo "Deleting a branch"
		# branch can be deleted only after [ approval is obtained ] && [ by restricted members ]	
		if [ "$allowdeletebranch" != "true" ]; then
                    memberTest devops_team
                    res=$?
		   
                    if [[ $res -eq "0" ]]; then
		       echo "****** WARNING : It looks like the entity deleting the branch is ${PUSHING_ENTITY_NAME}. ALLOWING it ******" >&2
		   else
		       echo "***** ERROR: Deleting a tracking branch is not allowed in this repository *****" >&2
		       exit 1
		   fi
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		echo "Tracking branch."
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		echo "Deleting an already tracked branch"
		if [ "$allowdeletebranch" != "true" ]; then
                   memberTest devops_team
                   res=$?
		   if [[ $res -eq "0" ]]; then
		       echo "****** WARNING : It looks like the entity deleting the branch is ${PUSHING_ENTITY_NAME}. ALLOWING it ******" >&2
		   else
		       echo "***** ERROR: Deleting a tracking branch is not allowed in this repository *****" >&2
		       exit 1
		   fi
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0
